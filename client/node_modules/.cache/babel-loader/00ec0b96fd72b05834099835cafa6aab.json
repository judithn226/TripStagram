{"ast":null,"code":"var replacements = {\n  /**\n   * Between replacement (replaces :min and :max)\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  between: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      min: parameters[0],\n      max: parameters[1]\n    });\n  },\n\n  /**\n   * Digits-Between replacement (replaces :min and :max)\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  digits_between: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      min: parameters[0],\n      max: parameters[1]\n    });\n  },\n\n  /**\n   * Required_if replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_if: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      other: this._getAttributeName(parameters[0]),\n      value: parameters[1]\n    });\n  },\n\n  /**\n   * Required_unless replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_unless: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      other: this._getAttributeName(parameters[0]),\n      value: parameters[1]\n    });\n  },\n\n  /**\n   * Required_with replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_with: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      field: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Required_with_all replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_with_all: function (template, rule) {\n    var parameters = rule.getParameters();\n\n    var getAttributeName = this._getAttributeName.bind(this);\n\n    return this._replacePlaceholders(rule, template, {\n      fields: parameters.map(getAttributeName).join(', ')\n    });\n  },\n\n  /**\n   * Required_without replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_without: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      field: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Required_without_all replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_without_all: function (template, rule) {\n    var parameters = rule.getParameters();\n\n    var getAttributeName = this._getAttributeName.bind(this);\n\n    return this._replacePlaceholders(rule, template, {\n      fields: parameters.map(getAttributeName).join(', ')\n    });\n  },\n\n  /**\n   * After replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  after: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      after: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Before replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  before: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      before: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * After_or_equal replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  after_or_equal: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      after_or_equal: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Before_or_equal replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  before_or_equal: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      before_or_equal: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Same replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  same: function (template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      same: this._getAttributeName(parameters[0])\n    });\n  }\n};\n\nfunction formatter(attribute) {\n  return attribute.replace(/[_\\[]/g, ' ').replace(/]/g, '');\n}\n\nmodule.exports = {\n  replacements: replacements,\n  formatter: formatter\n};","map":{"version":3,"sources":["/Users/erikcamchan/Desktop/TripStagram/client/node_modules/validatorjs/src/attributes.js"],"names":["replacements","between","template","rule","parameters","getParameters","_replacePlaceholders","min","max","digits_between","required_if","other","_getAttributeName","value","required_unless","required_with","field","required_with_all","getAttributeName","bind","fields","map","join","required_without","required_without_all","after","before","after_or_equal","before_or_equal","same","formatter","attribute","replace","module","exports"],"mappings":"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","sourcesContent":["var replacements = {\n\n  /**\n   * Between replacement (replaces :min and :max)\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  between: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      min: parameters[0],\n      max: parameters[1]\n    });\n  },\n\n  /**\n   * Digits-Between replacement (replaces :min and :max)\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  digits_between: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      min: parameters[0],\n      max: parameters[1]\n    });\n  },\n\n  /**\n   * Required_if replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_if: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      other: this._getAttributeName(parameters[0]),\n      value: parameters[1]\n    });\n  },\n\n  /**\n   * Required_unless replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_unless: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      other: this._getAttributeName(parameters[0]),\n      value: parameters[1]\n    });\n  },\n\n  /**\n   * Required_with replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_with: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      field: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Required_with_all replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_with_all: function(template, rule) {\n    var parameters = rule.getParameters();\n    var getAttributeName = this._getAttributeName.bind(this);\n    return this._replacePlaceholders(rule, template, {\n      fields: parameters.map(getAttributeName).join(', ')\n    });\n  },\n\n  /**\n   * Required_without replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_without: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      field: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Required_without_all replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  required_without_all: function(template, rule) {\n    var parameters = rule.getParameters();\n    var getAttributeName = this._getAttributeName.bind(this);\n    return this._replacePlaceholders(rule, template, {\n      fields: parameters.map(getAttributeName).join(', ')\n    });\n  },\n\n  /**\n   * After replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  after: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      after: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Before replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  before: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      before: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * After_or_equal replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  after_or_equal: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      after_or_equal: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Before_or_equal replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  before_or_equal: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      before_or_equal: this._getAttributeName(parameters[0])\n    });\n  },\n\n  /**\n   * Same replacement.\n   *\n   * @param  {string} template\n   * @param  {Rule} rule\n   * @return {string}\n   */\n  same: function(template, rule) {\n    var parameters = rule.getParameters();\n    return this._replacePlaceholders(rule, template, {\n      same: this._getAttributeName(parameters[0])\n    });\n  },\n};\n\nfunction formatter(attribute) {\n  return attribute.replace(/[_\\[]/g, ' ').replace(/]/g, '');\n}\n\nmodule.exports = {\n  replacements: replacements,\n  formatter: formatter\n};\n"]},"metadata":{},"sourceType":"script"}
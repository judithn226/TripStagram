{"ast":null,"code":"// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-a-leap-year\nfunction leapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n\nfunction checkFalsePositiveDates(dateString = '') {\n  if (dateString.length === 10) {\n    // massage input to use yyyy-mm-dd format\n    // we support yyyy/mm/dd or yyyy.mm.dd\n    let normalizedDate = dateString.replace('.', '-').replace('/', '-');\n    let parts = normalizedDate.split('-');\n\n    if (parts.length === 3) {\n      if (parts[0].length === 4) {\n        // yyyy-mm-dd format\n        let y = parseInt(parts[0]);\n        let m = parseInt(parts[1]);\n        let d = parseInt(parts[2]);\n\n        if (m === 2) {\n          // return leapYear(y) ? d <= 29 : d <= 28;\n          if (leapYear(y)) {\n            if (d > 29) {\n              return false;\n            }\n          } else {\n            if (d > 28) {\n              return false;\n            }\n          }\n        }\n\n        if (m === 4 || m === 6 || m === 9 || m === 11) {\n          if (d > 30) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true; // we are not in feburary, proceed\n  }\n\n  return true; // we are not testing formatted date, proceed to rest of validation\n}\n\nfunction isValidDate(dateString) {\n  let testDate;\n\n  if (typeof dateString === 'number') {\n    testDate = new Date(dateString);\n\n    if (typeof testDate === 'object') {\n      return true;\n    }\n  } // first convert incoming string to date object and see if it correct date and format\n\n\n  testDate = new Date(dateString);\n\n  if (typeof testDate === 'object') {\n    if (testDate.toString() === 'Invalid Date') {\n      return false;\n    }\n    /**\n     * Check for false positive dates\n     * perform special check on february as JS `new Date` incorrectly returns valid date\n     * Eg.  let newDate = new Date('2020-02-29')  // returns as March 02 2020\n     * Eg.  let newDate = new Date('2019-02-29')  // returns as March 01 2020\n     * Eg.  let newDate = new Date('2019-04-31')  // returns as April 30 2020\n     */\n\n\n    if (!checkFalsePositiveDates(dateString)) {\n      return false;\n    } // valid date object and not a february date\n\n\n    return true;\n  } // First check for the pattern\n\n\n  var regex_date = /^\\d{4}\\-\\d{1,2}\\-\\d{1,2}$/;\n\n  if (!regex_date.test(dateString)) {\n    return false;\n  } // Parse the date parts to integers\n\n\n  var parts = dateString.split(\"-\");\n  var day = parseInt(parts[2], 10);\n  var month = parseInt(parts[1], 10);\n  var year = parseInt(parts[0], 10); // Check the ranges of month and year\n\n  if (year < 1000 || year > 3000 || month == 0 || month > 12) {\n    return false;\n  }\n\n  var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // Adjust for leap years\n\n  if (year % 400 == 0 || year % 100 != 0 && year % 4 == 0) {\n    monthLength[1] = 29;\n  } // Check the range of the day\n\n\n  return day > 0 && day <= monthLength[month - 1];\n}\n\nvar rules = {\n  required: function (val) {\n    var str;\n\n    if (val === undefined || val === null) {\n      return false;\n    }\n\n    str = String(val).replace(/\\s/g, \"\");\n    return str.length > 0 ? true : false;\n  },\n  required_if: function (val, req, attribute) {\n    req = this.getParameters();\n\n    if (this.validator._objectPath(this.validator.input, req[0]) === req[1]) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n  required_unless: function (val, req, attribute) {\n    req = this.getParameters();\n\n    if (this.validator._objectPath(this.validator.input, req[0]) !== req[1]) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n  required_with: function (val, req, attribute) {\n    if (this.validator._objectPath(this.validator.input, req)) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n  required_with_all: function (val, req, attribute) {\n    req = this.getParameters();\n\n    for (var i = 0; i < req.length; i++) {\n      if (!this.validator._objectPath(this.validator.input, req[i])) {\n        return true;\n      }\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n  required_without: function (val, req, attribute) {\n    if (this.validator._objectPath(this.validator.input, req)) {\n      return true;\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n  required_without_all: function (val, req, attribute) {\n    req = this.getParameters();\n\n    for (var i = 0; i < req.length; i++) {\n      if (this.validator._objectPath(this.validator.input, req[i])) {\n        return true;\n      }\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n  boolean: function (val) {\n    return val === true || val === false || val === 0 || val === 1 || val === \"0\" || val === \"1\" || val === \"true\" || val === \"false\";\n  },\n  // compares the size of strings\n  // with numbers, compares the value\n  size: function (val, req, attribute) {\n    if (val) {\n      req = parseFloat(req);\n      var size = this.getSize();\n      return size === req;\n    }\n\n    return true;\n  },\n  string: function (val, req, attribute) {\n    return typeof val === \"string\";\n  },\n  sometimes: function (val) {\n    return true;\n  },\n\n  /**\n   * Compares the size of strings or the value of numbers if there is a truthy value\n   */\n  min: function (val, req, attribute) {\n    var size = this.getSize();\n    return size >= req;\n  },\n\n  /**\n   * Compares the size of strings or the value of numbers if there is a truthy value\n   */\n  max: function (val, req, attribute) {\n    var size = this.getSize();\n    return size <= req;\n  },\n  between: function (val, req, attribute) {\n    req = this.getParameters();\n    var size = this.getSize();\n    var min = parseFloat(req[0], 10);\n    var max = parseFloat(req[1], 10);\n    return size >= min && size <= max;\n  },\n  email: function (val) {\n    // Added umlaut support https://github.com/skaterdav85/validatorjs/issues/308\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!re.test(val)) {\n      // added support domain 3-n level https://github.com/skaterdav85/validatorjs/issues/384\n      re = /^((?:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]|[^\\u0000-\\u007F])+@(?:[a-zA-Z0-9]|[^\\u0000-\\u007F])(?:(?:[a-zA-Z0-9-]|[^\\u0000-\\u007F]){0,61}(?:[a-zA-Z0-9]|[^\\u0000-\\u007F]))?(?:\\.(?:[a-zA-Z0-9]|[^\\u0000-\\u007F])(?:(?:[a-zA-Z0-9-]|[^\\u0000-\\u007F]){0,61}(?:[a-zA-Z0-9]|[^\\u0000-\\u007F]))?)+)*$/;\n    }\n\n    return re.test(val);\n  },\n  numeric: function (val) {\n    var num;\n    num = Number(val); // tries to convert value to a number. useful if value is coming from form element\n\n    if (typeof num === \"number\" && !isNaN(num) && typeof val !== \"boolean\") {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  array: function (val) {\n    return val instanceof Array;\n  },\n  url: function (url) {\n    return /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_\\+.~#?&/=]*)/i.test(url);\n  },\n  alpha: function (val) {\n    return /^[a-zA-Z]+$/.test(val);\n  },\n  alpha_dash: function (val) {\n    return /^[a-zA-Z0-9_\\-]+$/.test(val);\n  },\n  alpha_num: function (val) {\n    return /^[a-zA-Z0-9]+$/.test(val);\n  },\n  same: function (val, req) {\n    var val1 = this.validator._flattenObject(this.validator.input)[req];\n\n    var val2 = val;\n\n    if (val1 === val2) {\n      return true;\n    }\n\n    return false;\n  },\n  different: function (val, req) {\n    var val1 = this.validator._flattenObject(this.validator.input)[req];\n\n    var val2 = val;\n\n    if (val1 !== val2) {\n      return true;\n    }\n\n    return false;\n  },\n  in: function (val, req) {\n    var list, i;\n\n    if (val) {\n      list = this.getParameters();\n    }\n\n    if (val && !(val instanceof Array)) {\n      var localValue = val;\n\n      for (i = 0; i < list.length; i++) {\n        if (typeof list[i] === \"string\") {\n          localValue = String(val);\n        }\n\n        if (localValue === list[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if (val && val instanceof Array) {\n      for (i = 0; i < val.length; i++) {\n        if (list.indexOf(val[i]) < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n  not_in: function (val, req) {\n    var list = this.getParameters();\n    var len = list.length;\n    var returnVal = true;\n\n    for (var i = 0; i < len; i++) {\n      var localValue = val;\n\n      if (typeof list[i] === \"string\") {\n        localValue = String(val);\n      }\n\n      if (localValue === list[i]) {\n        returnVal = false;\n        break;\n      }\n    }\n\n    return returnVal;\n  },\n  accepted: function (val) {\n    if (val === \"on\" || val === \"yes\" || val === 1 || val === \"1\" || val === true) {\n      return true;\n    }\n\n    return false;\n  },\n  confirmed: function (val, req, key) {\n    var confirmedKey = key + \"_confirmation\";\n\n    if (this.validator.input[confirmedKey] === val) {\n      return true;\n    }\n\n    return false;\n  },\n  integer: function (val) {\n    return String(parseInt(val, 10)) === String(val);\n  },\n  digits: function (val, req) {\n    var numericRule = this.validator.getRule('numeric');\n\n    if (numericRule.validate(val) && String(val.trim()).length === parseInt(req)) {\n      return true;\n    }\n\n    return false;\n  },\n  digits_between: function (val) {\n    var numericRule = this.validator.getRule(\"numeric\");\n    var req = this.getParameters();\n    var valueDigitsCount = String(val).length;\n    var min = parseFloat(req[0], 10);\n    var max = parseFloat(req[1], 10);\n\n    if (numericRule.validate(val) && valueDigitsCount >= min && valueDigitsCount <= max) {\n      return true;\n    }\n\n    return false;\n  },\n  regex: function (val, req) {\n    let reqPattern = req;\n    var mod = /[g|i|m]{1,3}$/;\n    var flag = req.match(mod);\n    flag = flag ? flag[0] : \"\";\n    req = req.replace(mod, \"\").slice(1, -1);\n    req = new RegExp(req, flag);\n    return !!req.test(val);\n  },\n  date: function (val, format) {\n    return isValidDate(val);\n  },\n  present: function (val) {\n    return typeof val !== \"undefined\";\n  },\n  after: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() < new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n  after_or_equal: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() <= new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n  before: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() > new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n  before_or_equal: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() >= new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n  hex: function (val) {\n    return /^[0-9a-f]+$/i.test(val);\n  },\n  ipv4: function (val, req, attribute) {\n    if (typeof val != 'string') return false; // regex to check that each octet is valid\n\n    var er = /^[0-9]+$/; // ipv4 octets are delimited by dot\n\n    octets = val.split('.'); // check 1: ipv4 address should contains 4 octets\n\n    if (octets.length != 4) return false;\n\n    for (let i = 0; i < octets.length; i++) {\n      const element = octets[i]; // check 2: each octet should be integer bigger than 0\n\n      if (!er.test(element)) return false; // check 3: each octet value should be less than 256\n\n      var octetValue = parseInt(element);\n      if (octetValue >= 256) return false;\n    } // if all checks passed, we know it's valid IPv4 address!\n\n\n    return true;\n  },\n  ipv6: function (val, req, attribute) {\n    if (typeof val != 'string') return false; // regex to check that each hextet is valid\n\n    var er = /^[0-9a-f]+$/; // ipv6 hextets are delimited by colon\n\n    hextets = val.split(':'); // check 1: ipv6 should contain only one consecutive colons\n\n    colons = val.match(/::/);\n    if (colons != null && val.match(/::/g).length > 1) return false; // check 2: ipv6 should not be ending or starting with colon\n    //          edge case: not with consecutive colons\n\n    if (val[0] == ':' && (colons == null || colons != null && colons.index != 0)) return false;\n    if (val[val.length - 1] == ':' && (colons == null || colons != null && colons.index != val.length - 2)) return false; // check 3: ipv6 should contain no less than 3 sector\n    //         minimum ipv6 addres - ::1\n\n    if (3 > hextets.length) return false; // check 4: ipv6 should contain no more than 8 sectors\n    //         only 1 edge case: when first or last sector is ommited\n\n    var isEdgeCase = hextets.length == 9 && colons != null && (colons.index == 0 || colons.index == val.length - 2);\n    if (hextets.length > 8 && !isEdgeCase) return false; // check 5: ipv6 should contain exactly one consecutive colons if it has less than 8 sectors\n\n    if (hextets.length != 8 && colons == null) return false;\n\n    for (let i = 0; i < hextets.length; i++) {\n      const element = hextets[i];\n      if (element.length == 0) continue; // check 6: all of hextets should contain numbers from 0 to f (in hexadecimal)\n\n      if (!er.test(element)) return false; // check 7: all of hextet values should be less then ffff (in hexadeimal)\n      //          checking using length of hextet. lowest invalid value's length is 5.\n      //          so all valid hextets are length of 4 or less\n\n      if (element.length > 4) return false;\n    }\n\n    return true;\n  },\n  ip: function (val, req, attribute) {\n    return rules['ipv4'](val, req, attribute) || rules['ipv6'](val, req, attribute);\n  }\n};\n\nvar missedRuleValidator = function () {\n  throw new Error(\"Validator `\" + this.name + \"` is not defined!\");\n};\n\nvar missedRuleMessage;\n\nfunction Rule(name, fn, async) {\n  this.name = name;\n  this.fn = fn;\n  this.passes = null;\n  this._customMessage = undefined;\n  this.async = async;\n}\n\nRule.prototype = {\n  /**\n   * Validate rule\n   *\n   * @param  {mixed} inputValue\n   * @param  {mixed} ruleValue\n   * @param  {string} attribute\n   * @param  {function} callback\n   * @return {boolean|undefined}\n   */\n  validate: function (inputValue, ruleValue, attribute, callback) {\n    var _this = this;\n\n    this._setValidatingData(attribute, inputValue, ruleValue);\n\n    if (typeof callback === \"function\") {\n      this.callback = callback;\n\n      var handleResponse = function (passes, message) {\n        _this.response(passes, message);\n      };\n\n      if (this.async) {\n        return this._apply(inputValue, ruleValue, attribute, handleResponse);\n      } else {\n        return handleResponse(this._apply(inputValue, ruleValue, attribute));\n      }\n    }\n\n    return this._apply(inputValue, ruleValue, attribute);\n  },\n\n  /**\n   * Apply validation function\n   *\n   * @param  {mixed} inputValue\n   * @param  {mixed} ruleValue\n   * @param  {string} attribute\n   * @param  {function} callback\n   * @return {boolean|undefined}\n   */\n  _apply: function (inputValue, ruleValue, attribute, callback) {\n    var fn = this.isMissed() ? missedRuleValidator : this.fn;\n    return fn.apply(this, [inputValue, ruleValue, attribute, callback]);\n  },\n\n  /**\n   * Set validating data\n   *\n   * @param {string} attribute\n   * @param {mixed} inputValue\n   * @param {mixed} ruleValue\n   * @return {void}\n   */\n  _setValidatingData: function (attribute, inputValue, ruleValue) {\n    this.attribute = attribute;\n    this.inputValue = inputValue;\n    this.ruleValue = ruleValue;\n  },\n\n  /**\n   * Get parameters\n   *\n   * @return {array}\n   */\n  getParameters: function () {\n    var value = [];\n\n    if (typeof this.ruleValue === \"string\") {\n      value = this.ruleValue.split(\",\");\n    }\n\n    if (typeof this.ruleValue === \"number\") {\n      value.push(this.ruleValue);\n    }\n\n    if (this.ruleValue instanceof Array) {\n      value = this.ruleValue;\n    }\n\n    return value;\n  },\n\n  /**\n   * Get true size of value\n   *\n   * @return {integer|float}\n   */\n  getSize: function () {\n    var value = this.inputValue;\n\n    if (value instanceof Array) {\n      return value.length;\n    }\n\n    if (typeof value === \"number\") {\n      return value;\n    }\n\n    if (this.validator._hasNumericRule(this.attribute)) {\n      return parseFloat(value, 10);\n    }\n\n    return value.length;\n  },\n\n  /**\n   * Get the type of value being checked; numeric or string.\n   *\n   * @return {string}\n   */\n  _getValueType: function () {\n    if (typeof this.inputValue === \"number\" || this.validator._hasNumericRule(this.attribute)) {\n      return \"numeric\";\n    }\n\n    return \"string\";\n  },\n\n  /**\n   * Set the async callback response\n   *\n   * @param  {boolean|undefined} passes  Whether validation passed\n   * @param  {string|undefined} message Custom error message\n   * @return {void}\n   */\n  response: function (passes, message) {\n    this.passes = passes === undefined || passes === true;\n    this._customMessage = message;\n    this.callback(this.passes, message);\n  },\n\n  /**\n   * Set validator instance\n   *\n   * @param {Validator} validator\n   * @return {void}\n   */\n  setValidator: function (validator) {\n    this.validator = validator;\n  },\n\n  /**\n   * Check if rule is missed\n   *\n   * @return {boolean}\n   */\n  isMissed: function () {\n    return typeof this.fn !== \"function\";\n  },\n\n  get customMessage() {\n    return this.isMissed() ? missedRuleMessage : this._customMessage;\n  }\n\n};\nvar manager = {\n  /**\n   * List of async rule names\n   *\n   * @type {Array}\n   */\n  asyncRules: [],\n\n  /**\n   * Implicit rules (rules to always validate)\n   *\n   * @type {Array}\n   */\n  implicitRules: [\"required\", \"required_if\", \"required_unless\", \"required_with\", \"required_with_all\", \"required_without\", \"required_without_all\", \"accepted\", \"present\"],\n\n  /**\n   * Get rule by name\n   *\n   * @param  {string} name\n   * @param {Validator}\n   * @return {Rule}\n   */\n  make: function (name, validator) {\n    var async = this.isAsync(name);\n    var rule = new Rule(name, rules[name], async);\n    rule.setValidator(validator);\n    return rule;\n  },\n\n  /**\n   * Determine if given rule is async\n   *\n   * @param  {string}  name\n   * @return {boolean}\n   */\n  isAsync: function (name) {\n    for (var i = 0, len = this.asyncRules.length; i < len; i++) {\n      if (this.asyncRules[i] === name) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Determine if rule is implicit (should always validate)\n   *\n   * @param {string} name\n   * @return {boolean}\n   */\n  isImplicit: function (name) {\n    return this.implicitRules.indexOf(name) > -1;\n  },\n\n  /**\n   * Register new rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  register: function (name, fn) {\n    rules[name] = fn;\n  },\n\n  /**\n   * Register new implicit rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerImplicit: function (name, fn) {\n    this.register(name, fn);\n    this.implicitRules.push(name);\n  },\n\n  /**\n   * Register async rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerAsync: function (name, fn) {\n    this.register(name, fn);\n    this.asyncRules.push(name);\n  },\n\n  /**\n   * Register implicit async rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerAsyncImplicit: function (name, fn) {\n    this.registerImplicit(name, fn);\n    this.asyncRules.push(name);\n  },\n  registerMissedRuleValidator: function (fn, message) {\n    missedRuleValidator = fn;\n    missedRuleMessage = message;\n  }\n};\nmodule.exports = manager;","map":{"version":3,"sources":["/Users/erikcamchan/Desktop/TripStagram/client/node_modules/validatorjs/src/rules.js"],"names":["leapYear","year","checkFalsePositiveDates","dateString","length","normalizedDate","replace","parts","split","y","parseInt","m","d","isValidDate","testDate","Date","toString","regex_date","test","day","month","monthLength","rules","required","val","str","undefined","String","required_if","req","attribute","getParameters","validator","_objectPath","input","getRule","validate","required_unless","required_with","required_with_all","i","required_without","required_without_all","boolean","size","parseFloat","getSize","string","sometimes","min","max","between","email","re","numeric","num","Number","isNaN","array","Array","url","alpha","alpha_dash","alpha_num","same","val1","_flattenObject","val2","different","in","list","localValue","indexOf","not_in","len","returnVal","accepted","confirmed","key","confirmedKey","integer","digits","numericRule","trim","digits_between","valueDigitsCount","regex","reqPattern","mod","flag","match","slice","RegExp","date","format","present","after","getTime","after_or_equal","before","before_or_equal","hex","ipv4","er","octets","element","octetValue","ipv6","hextets","colons","index","isEdgeCase","ip","missedRuleValidator","Error","name","missedRuleMessage","Rule","fn","async","passes","_customMessage","prototype","inputValue","ruleValue","callback","_this","_setValidatingData","handleResponse","message","response","_apply","isMissed","apply","value","push","_hasNumericRule","_getValueType","setValidator","customMessage","manager","asyncRules","implicitRules","make","isAsync","rule","isImplicit","register","registerImplicit","registerAsync","registerAsyncImplicit","registerMissedRuleValidator","module","exports"],"mappings":"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","sourcesContent":["\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/determine-a-leap-year\nfunction leapYear(year) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n}\n\nfunction checkFalsePositiveDates(dateString = '') {\n\n  if (dateString.length === 10) {\n\n    // massage input to use yyyy-mm-dd format\n    // we support yyyy/mm/dd or yyyy.mm.dd\n    let normalizedDate = dateString.replace('.', '-').replace('/', '-');\n    let parts = normalizedDate.split('-');\n    if (parts.length === 3) {\n      if (parts[0].length === 4) {\n        // yyyy-mm-dd format\n        let y = parseInt(parts[0]);\n        let m = parseInt(parts[1]);\n        let d = parseInt(parts[2]);\n        if (m === 2) {\n          // return leapYear(y) ? d <= 29 : d <= 28;\n          if (leapYear(y)) {\n            if (d > 29) {\n              return false;\n            }\n          } else {\n            if (d > 28) {\n              return false;\n            }\n          }\n        }\n        if (m === 4 || m === 6 || m === 9 || m === 11) {\n          if (d > 30) {\n            return false;\n          }\n        }\n      }\n    }\n    return true; // we are not in feburary, proceed\n  }\n  return true; // we are not testing formatted date, proceed to rest of validation\n}\n\nfunction isValidDate(dateString) {\n  let testDate;\n  if (typeof dateString === 'number') {\n    testDate = new Date(dateString);\n    if (typeof testDate === 'object') {\n      return true;\n    }\n  }\n  // first convert incoming string to date object and see if it correct date and format\n  testDate = new Date(dateString);\n  if (typeof testDate === 'object') {\n    if (testDate.toString() === 'Invalid Date') {\n      return false;\n    }\n\n    /**\n     * Check for false positive dates\n     * perform special check on february as JS `new Date` incorrectly returns valid date\n     * Eg.  let newDate = new Date('2020-02-29')  // returns as March 02 2020\n     * Eg.  let newDate = new Date('2019-02-29')  // returns as March 01 2020\n     * Eg.  let newDate = new Date('2019-04-31')  // returns as April 30 2020\n     */\n    if (!checkFalsePositiveDates(dateString)) {\n      return false;\n    }\n\n    // valid date object and not a february date\n    return true;\n  }\n\n  // First check for the pattern\n  var regex_date = /^\\d{4}\\-\\d{1,2}\\-\\d{1,2}$/;\n\n  if (!regex_date.test(dateString)) {\n    return false;\n  }\n\n  // Parse the date parts to integers\n  var parts = dateString.split(\"-\");\n  var day = parseInt(parts[2], 10);\n  var month = parseInt(parts[1], 10);\n  var year = parseInt(parts[0], 10);\n\n  // Check the ranges of month and year\n  if (year < 1000 || year > 3000 || month == 0 || month > 12) {\n    return false;\n  }\n\n  var monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n  // Adjust for leap years\n  if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0)) {\n    monthLength[1] = 29;\n  }\n\n  // Check the range of the day\n  return day > 0 && day <= monthLength[month - 1];\n}\n\nvar rules = {\n  required: function (val) {\n    var str;\n\n    if (val === undefined || val === null) {\n      return false;\n    }\n\n    str = String(val).replace(/\\s/g, \"\");\n    return str.length > 0 ? true : false;\n  },\n\n  required_if: function (val, req, attribute) {\n    req = this.getParameters();\n    if (this.validator._objectPath(this.validator.input, req[0]) === req[1]) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n\n  required_unless: function (val, req, attribute) {\n    req = this.getParameters();\n    if (this.validator._objectPath(this.validator.input, req[0]) !== req[1]) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n\n  required_with: function (val, req, attribute) {\n    if (this.validator._objectPath(this.validator.input, req)) {\n      return this.validator.getRule(\"required\").validate(val);\n    }\n\n    return true;\n  },\n\n  required_with_all: function (val, req, attribute) {\n    req = this.getParameters();\n\n    for (var i = 0; i < req.length; i++) {\n      if (!this.validator._objectPath(this.validator.input, req[i])) {\n        return true;\n      }\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n\n  required_without: function (val, req, attribute) {\n    if (this.validator._objectPath(this.validator.input, req)) {\n      return true;\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n\n  required_without_all: function (val, req, attribute) {\n    req = this.getParameters();\n\n    for (var i = 0; i < req.length; i++) {\n      if (this.validator._objectPath(this.validator.input, req[i])) {\n        return true;\n      }\n    }\n\n    return this.validator.getRule(\"required\").validate(val);\n  },\n\n  boolean: function (val) {\n    return (\n      val === true ||\n      val === false ||\n      val === 0 ||\n      val === 1 ||\n      val === \"0\" ||\n      val === \"1\" ||\n      val === \"true\" ||\n      val === \"false\"\n    );\n  },\n\n  // compares the size of strings\n  // with numbers, compares the value\n  size: function (val, req, attribute) {\n    if (val) {\n      req = parseFloat(req);\n\n      var size = this.getSize();\n\n      return size === req;\n    }\n\n    return true;\n  },\n\n  string: function (val, req, attribute) {\n    return typeof val === \"string\";\n  },\n\n  sometimes: function (val) {\n    return true;\n  },\n\n  /**\n   * Compares the size of strings or the value of numbers if there is a truthy value\n   */\n  min: function (val, req, attribute) {\n    var size = this.getSize();\n    return size >= req;\n  },\n\n  /**\n   * Compares the size of strings or the value of numbers if there is a truthy value\n   */\n  max: function (val, req, attribute) {\n    var size = this.getSize();\n    return size <= req;\n  },\n\n  between: function (val, req, attribute) {\n    req = this.getParameters();\n    var size = this.getSize();\n    var min = parseFloat(req[0], 10);\n    var max = parseFloat(req[1], 10);\n    return size >= min && size <= max;\n  },\n\n  email: function (val) {\n    // Added umlaut support https://github.com/skaterdav85/validatorjs/issues/308\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (!re.test(val)) {\n      // added support domain 3-n level https://github.com/skaterdav85/validatorjs/issues/384\n      re = /^((?:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]|[^\\u0000-\\u007F])+@(?:[a-zA-Z0-9]|[^\\u0000-\\u007F])(?:(?:[a-zA-Z0-9-]|[^\\u0000-\\u007F]){0,61}(?:[a-zA-Z0-9]|[^\\u0000-\\u007F]))?(?:\\.(?:[a-zA-Z0-9]|[^\\u0000-\\u007F])(?:(?:[a-zA-Z0-9-]|[^\\u0000-\\u007F]){0,61}(?:[a-zA-Z0-9]|[^\\u0000-\\u007F]))?)+)*$/;\n    }\n    return re.test(val);\n  },\n\n  numeric: function (val) {\n    var num;\n\n    num = Number(val); // tries to convert value to a number. useful if value is coming from form element\n\n    if (typeof num === \"number\" && !isNaN(num) && typeof val !== \"boolean\") {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  array: function (val) {\n    return val instanceof Array;\n  },\n\n  url: function (url) {\n    return /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_\\+.~#?&/=]*)/i.test(url);\n  },\n\n  alpha: function (val) {\n    return /^[a-zA-Z]+$/.test(val);\n  },\n\n  alpha_dash: function (val) {\n    return /^[a-zA-Z0-9_\\-]+$/.test(val);\n  },\n\n  alpha_num: function (val) {\n    return /^[a-zA-Z0-9]+$/.test(val);\n  },\n\n  same: function (val, req) {\n    var val1 = this.validator._flattenObject(this.validator.input)[req];\n    var val2 = val;\n\n    if (val1 === val2) {\n      return true;\n    }\n\n    return false;\n  },\n\n  different: function (val, req) {\n    var val1 = this.validator._flattenObject(this.validator.input)[req];\n    var val2 = val;\n\n    if (val1 !== val2) {\n      return true;\n    }\n\n    return false;\n  },\n\n  in: function (val, req) {\n    var list, i;\n\n    if (val) {\n      list = this.getParameters();\n    }\n\n    if (val && !(val instanceof Array)) {\n      var localValue = val;\n\n      for (i = 0; i < list.length; i++) {\n        if (typeof list[i] === \"string\") {\n          localValue = String(val);\n        }\n\n        if (localValue === list[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if (val && val instanceof Array) {\n      for (i = 0; i < val.length; i++) {\n        if (list.indexOf(val[i]) < 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n\n  not_in: function (val, req) {\n    var list = this.getParameters();\n    var len = list.length;\n    var returnVal = true;\n\n    for (var i = 0; i < len; i++) {\n      var localValue = val;\n\n      if (typeof list[i] === \"string\") {\n        localValue = String(val);\n      }\n\n      if (localValue === list[i]) {\n        returnVal = false;\n        break;\n      }\n    }\n\n    return returnVal;\n  },\n\n  accepted: function (val) {\n    if (val === \"on\" || val === \"yes\" || val === 1 || val === \"1\" || val === true) {\n      return true;\n    }\n\n    return false;\n  },\n\n  confirmed: function (val, req, key) {\n    var confirmedKey = key + \"_confirmation\";\n\n    if (this.validator.input[confirmedKey] === val) {\n      return true;\n    }\n\n    return false;\n  },\n\n  integer: function (val) {\n    return String(parseInt(val, 10)) === String(val);\n  },\n\n  digits: function (val, req) {\n    var numericRule = this.validator.getRule('numeric');\n    if (numericRule.validate(val) && String(val.trim()).length === parseInt(req)) {\n      return true;\n    }\n\n    return false;\n  },\n\n  digits_between: function (val) {\n    var numericRule = this.validator.getRule(\"numeric\");\n    var req = this.getParameters();\n    var valueDigitsCount = String(val).length;\n    var min = parseFloat(req[0], 10);\n    var max = parseFloat(req[1], 10);\n\n    if (numericRule.validate(val) && valueDigitsCount >= min && valueDigitsCount <= max) {\n      return true;\n    }\n\n    return false;\n  },\n\n  regex: function (val, req) {\n    let reqPattern = req;\n    var mod = /[g|i|m]{1,3}$/;\n    var flag = req.match(mod);\n    flag = flag ? flag[0] : \"\";\n\n    req = req.replace(mod, \"\").slice(1, -1);\n    req = new RegExp(req, flag);\n    return !!req.test(val);\n  },\n\n  date: function (val, format) {\n    return isValidDate(val);\n  },\n\n  present: function (val) {\n    return typeof val !== \"undefined\";\n  },\n\n  after: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() < new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  after_or_equal: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() <= new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  before: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() > new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  before_or_equal: function (val, req) {\n    var val1 = this.validator.input[req];\n    var val2 = val;\n\n    if (!isValidDate(val1)) {\n      return false;\n    }\n    if (!isValidDate(val2)) {\n      return false;\n    }\n\n    if (new Date(val1).getTime() >= new Date(val2).getTime()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  hex: function (val) {\n    return /^[0-9a-f]+$/i.test(val);\n  },\n\n  ipv4: function (val, req, attribute) {\n    if (typeof val != 'string')\n      return false;\n\n    // regex to check that each octet is valid\n    var er = /^[0-9]+$/;\n    // ipv4 octets are delimited by dot\n    octets = val.split('.');\n    // check 1: ipv4 address should contains 4 octets\n    if (octets.length != 4)\n      return false;\n\n    for (let i = 0; i < octets.length; i++) {\n      const element = octets[i];\n      // check 2: each octet should be integer bigger than 0\n      if (!er.test(element))\n        return false;\n\n      // check 3: each octet value should be less than 256\n      var octetValue = parseInt(element);\n      if (octetValue >= 256)\n        return false;\n    }\n\n    // if all checks passed, we know it's valid IPv4 address!\n    return true;\n  },\n\n  ipv6: function (val, req, attribute) {\n    if (typeof val != 'string')\n      return false;\n\n    // regex to check that each hextet is valid\n    var er = /^[0-9a-f]+$/;\n    // ipv6 hextets are delimited by colon\n    hextets = val.split(':');\n\n    // check 1: ipv6 should contain only one consecutive colons\n    colons = val.match(/::/);\n    if (colons != null && val.match(/::/g).length > 1)\n      return false;\n\n    // check 2: ipv6 should not be ending or starting with colon\n    //          edge case: not with consecutive colons\n    if (val[0] == ':' && (colons == null || (colons != null && colons.index != 0)))\n      return false;\n    if (val[val.length - 1] == ':' && (colons == null || (colons != null && colons.index != val.length - 2)))\n      return false;\n\n    // check 3: ipv6 should contain no less than 3 sector\n    //         minimum ipv6 addres - ::1\n    if (3 > hextets.length)\n      return false;\n\n    // check 4: ipv6 should contain no more than 8 sectors\n    //         only 1 edge case: when first or last sector is ommited\n    var isEdgeCase = (hextets.length == 9 && colons != null && (colons.index == 0 || colons.index == val.length - 2));\n    if (hextets.length > 8 && !isEdgeCase)\n      return false;\n\n    // check 5: ipv6 should contain exactly one consecutive colons if it has less than 8 sectors\n    if (hextets.length != 8 && colons == null)\n      return false;\n\n    for (let i = 0; i < hextets.length; i++) {\n      const element = hextets[i];\n\n      if (element.length == 0)\n        continue;\n\n      // check 6: all of hextets should contain numbers from 0 to f (in hexadecimal)\n      if (!er.test(element))\n        return false;\n\n      // check 7: all of hextet values should be less then ffff (in hexadeimal)\n      //          checking using length of hextet. lowest invalid value's length is 5.\n      //          so all valid hextets are length of 4 or less\n      if (element.length > 4)\n        return false;\n    }\n    return true;\n  },\n\n  ip: function (val, req, attribute) {\n    return rules['ipv4'](val, req, attribute) || rules['ipv6'](val, req, attribute);\n  }\n\n};\n\nvar missedRuleValidator = function () {\n  throw new Error(\"Validator `\" + this.name + \"` is not defined!\");\n};\nvar missedRuleMessage;\n\nfunction Rule(name, fn, async) {\n  this.name = name;\n  this.fn = fn;\n  this.passes = null;\n  this._customMessage = undefined;\n  this.async = async;\n}\n\nRule.prototype = {\n  /**\n   * Validate rule\n   *\n   * @param  {mixed} inputValue\n   * @param  {mixed} ruleValue\n   * @param  {string} attribute\n   * @param  {function} callback\n   * @return {boolean|undefined}\n   */\n  validate: function (inputValue, ruleValue, attribute, callback) {\n    var _this = this;\n    this._setValidatingData(attribute, inputValue, ruleValue);\n    if (typeof callback === \"function\") {\n      this.callback = callback;\n      var handleResponse = function (passes, message) {\n        _this.response(passes, message);\n      };\n\n      if (this.async) {\n        return this._apply(inputValue, ruleValue, attribute, handleResponse);\n      } else {\n        return handleResponse(this._apply(inputValue, ruleValue, attribute));\n      }\n    }\n    return this._apply(inputValue, ruleValue, attribute);\n  },\n\n  /**\n   * Apply validation function\n   *\n   * @param  {mixed} inputValue\n   * @param  {mixed} ruleValue\n   * @param  {string} attribute\n   * @param  {function} callback\n   * @return {boolean|undefined}\n   */\n  _apply: function (inputValue, ruleValue, attribute, callback) {\n    var fn = this.isMissed() ? missedRuleValidator : this.fn;\n\n    return fn.apply(this, [inputValue, ruleValue, attribute, callback]);\n  },\n\n  /**\n   * Set validating data\n   *\n   * @param {string} attribute\n   * @param {mixed} inputValue\n   * @param {mixed} ruleValue\n   * @return {void}\n   */\n  _setValidatingData: function (attribute, inputValue, ruleValue) {\n    this.attribute = attribute;\n    this.inputValue = inputValue;\n    this.ruleValue = ruleValue;\n  },\n\n  /**\n   * Get parameters\n   *\n   * @return {array}\n   */\n  getParameters: function () {\n    var value = [];\n\n    if (typeof this.ruleValue === \"string\") {\n      value = this.ruleValue.split(\",\");\n    }\n\n    if (typeof this.ruleValue === \"number\") {\n      value.push(this.ruleValue);\n    }\n\n    if (this.ruleValue instanceof Array) {\n      value = this.ruleValue;\n    }\n\n    return value;\n  },\n\n  /**\n   * Get true size of value\n   *\n   * @return {integer|float}\n   */\n  getSize: function () {\n    var value = this.inputValue;\n\n    if (value instanceof Array) {\n      return value.length;\n    }\n\n    if (typeof value === \"number\") {\n      return value;\n    }\n\n    if (this.validator._hasNumericRule(this.attribute)) {\n      return parseFloat(value, 10);\n    }\n\n    return value.length;\n  },\n\n  /**\n   * Get the type of value being checked; numeric or string.\n   *\n   * @return {string}\n   */\n  _getValueType: function () {\n    if (typeof this.inputValue === \"number\" || this.validator._hasNumericRule(this.attribute)) {\n      return \"numeric\";\n    }\n\n    return \"string\";\n  },\n\n  /**\n   * Set the async callback response\n   *\n   * @param  {boolean|undefined} passes  Whether validation passed\n   * @param  {string|undefined} message Custom error message\n   * @return {void}\n   */\n  response: function (passes, message) {\n    this.passes = passes === undefined || passes === true;\n    this._customMessage = message;\n    this.callback(this.passes, message);\n  },\n\n  /**\n   * Set validator instance\n   *\n   * @param {Validator} validator\n   * @return {void}\n   */\n  setValidator: function (validator) {\n    this.validator = validator;\n  },\n\n  /**\n   * Check if rule is missed\n   *\n   * @return {boolean}\n   */\n  isMissed: function () {\n    return typeof this.fn !== \"function\";\n  },\n\n  get customMessage() {\n    return this.isMissed() ? missedRuleMessage : this._customMessage;\n  }\n};\n\nvar manager = {\n  /**\n   * List of async rule names\n   *\n   * @type {Array}\n   */\n  asyncRules: [],\n\n  /**\n   * Implicit rules (rules to always validate)\n   *\n   * @type {Array}\n   */\n  implicitRules: [\n    \"required\",\n    \"required_if\",\n    \"required_unless\",\n    \"required_with\",\n    \"required_with_all\",\n    \"required_without\",\n    \"required_without_all\",\n    \"accepted\",\n    \"present\"\n  ],\n\n  /**\n   * Get rule by name\n   *\n   * @param  {string} name\n   * @param {Validator}\n   * @return {Rule}\n   */\n  make: function (name, validator) {\n    var async = this.isAsync(name);\n    var rule = new Rule(name, rules[name], async);\n    rule.setValidator(validator);\n    return rule;\n  },\n\n  /**\n   * Determine if given rule is async\n   *\n   * @param  {string}  name\n   * @return {boolean}\n   */\n  isAsync: function (name) {\n    for (var i = 0, len = this.asyncRules.length; i < len; i++) {\n      if (this.asyncRules[i] === name) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Determine if rule is implicit (should always validate)\n   *\n   * @param {string} name\n   * @return {boolean}\n   */\n  isImplicit: function (name) {\n    return this.implicitRules.indexOf(name) > -1;\n  },\n\n  /**\n   * Register new rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  register: function (name, fn) {\n    rules[name] = fn;\n  },\n\n  /**\n   * Register new implicit rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerImplicit: function (name, fn) {\n    this.register(name, fn);\n    this.implicitRules.push(name);\n  },\n\n  /**\n   * Register async rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerAsync: function (name, fn) {\n    this.register(name, fn);\n    this.asyncRules.push(name);\n  },\n\n  /**\n   * Register implicit async rule\n   *\n   * @param  {string}   name\n   * @param  {function} fn\n   * @return {void}\n   */\n  registerAsyncImplicit: function (name, fn) {\n    this.registerImplicit(name, fn);\n    this.asyncRules.push(name);\n  },\n\n  registerMissedRuleValidator: function (fn, message) {\n    missedRuleValidator = fn;\n    missedRuleMessage = message;\n  }\n};\n\nmodule.exports = manager;\n"]},"metadata":{},"sourceType":"script"}
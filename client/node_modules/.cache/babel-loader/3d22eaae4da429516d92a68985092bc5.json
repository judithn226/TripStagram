{"ast":null,"code":"var Errors = function () {\n  this.errors = {};\n};\n\nErrors.prototype = {\n  constructor: Errors,\n\n  /**\n   * Add new error message for given attribute\n   *\n   * @param  {string} attribute\n   * @param  {string} message\n   * @return {void}\n   */\n  add: function (attribute, message) {\n    if (!this.has(attribute)) {\n      this.errors[attribute] = [];\n    }\n\n    if (this.errors[attribute].indexOf(message) === -1) {\n      this.errors[attribute].push(message);\n    }\n  },\n\n  /**\n   * Returns an array of error messages for an attribute, or an empty array\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {array} An array of error messages\n   */\n  get: function (attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute];\n    }\n\n    return [];\n  },\n\n  /**\n   * Returns the first error message for an attribute, false otherwise\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {string|false} First error message or false\n   */\n  first: function (attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute][0];\n    }\n\n    return false;\n  },\n\n  /**\n   * Get all error messages from all failing attributes\n   *\n   * @return {Object} Failed attribute names for keys and an array of messages for values\n   */\n  all: function () {\n    return this.errors;\n  },\n\n  /**\n   * Determine if there are any error messages for an attribute\n   *\n   * @param  {string}  attribute A key in the data object being validated\n   * @return {boolean}\n   */\n  has: function (attribute) {\n    if (this.errors.hasOwnProperty(attribute)) {\n      return true;\n    }\n\n    return false;\n  }\n};\nmodule.exports = Errors;","map":{"version":3,"sources":["/Users/victoriablackburn/TripStagram/client/node_modules/react-form-input-validation/node_modules/validatorjs/src/errors.js"],"names":["Errors","errors","prototype","constructor","add","attribute","message","has","indexOf","push","get","first","all","hasOwnProperty","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAG,YAAW;AACtB,OAAKC,MAAL,GAAc,EAAd;AACD,CAFD;;AAIAD,MAAM,CAACE,SAAP,GAAmB;AACjBC,EAAAA,WAAW,EAAEH,MADI;;AAGjB;AACF;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,GAAG,EAAE,UAASC,SAAT,EAAoBC,OAApB,EAA6B;AAChC,QAAI,CAAC,KAAKC,GAAL,CAASF,SAAT,CAAL,EAA0B;AACxB,WAAKJ,MAAL,CAAYI,SAAZ,IAAyB,EAAzB;AACD;;AAED,QAAI,KAAKJ,MAAL,CAAYI,SAAZ,EAAuBG,OAAvB,CAA+BF,OAA/B,MAA4C,CAAC,CAAjD,EAAoD;AAClD,WAAKL,MAAL,CAAYI,SAAZ,EAAuBI,IAAvB,CAA4BH,OAA5B;AACD;AACF,GAlBgB;;AAoBjB;AACF;AACA;AACA;AACA;AACA;AACEI,EAAAA,GAAG,EAAE,UAASL,SAAT,EAAoB;AACvB,QAAI,KAAKE,GAAL,CAASF,SAAT,CAAJ,EAAyB;AACvB,aAAO,KAAKJ,MAAL,CAAYI,SAAZ,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAhCgB;;AAkCjB;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,KAAK,EAAE,UAASN,SAAT,EAAoB;AACzB,QAAI,KAAKE,GAAL,CAASF,SAAT,CAAJ,EAAyB;AACvB,aAAO,KAAKJ,MAAL,CAAYI,SAAZ,EAAuB,CAAvB,CAAP;AACD;;AAED,WAAO,KAAP;AACD,GA9CgB;;AAgDjB;AACF;AACA;AACA;AACA;AACEO,EAAAA,GAAG,EAAE,YAAW;AACd,WAAO,KAAKX,MAAZ;AACD,GAvDgB;;AAyDjB;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,GAAG,EAAE,UAASF,SAAT,EAAoB;AACvB,QAAI,KAAKJ,MAAL,CAAYY,cAAZ,CAA2BR,SAA3B,CAAJ,EAA2C;AACzC,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;AArEgB,CAAnB;AAwEAS,MAAM,CAACC,OAAP,GAAiBf,MAAjB","sourcesContent":["var Errors = function() {\n  this.errors = {};\n};\n\nErrors.prototype = {\n  constructor: Errors,\n\n  /**\n   * Add new error message for given attribute\n   *\n   * @param  {string} attribute\n   * @param  {string} message\n   * @return {void}\n   */\n  add: function(attribute, message) {\n    if (!this.has(attribute)) {\n      this.errors[attribute] = [];\n    }\n\n    if (this.errors[attribute].indexOf(message) === -1) {\n      this.errors[attribute].push(message);\n    }\n  },\n\n  /**\n   * Returns an array of error messages for an attribute, or an empty array\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {array} An array of error messages\n   */\n  get: function(attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute];\n    }\n\n    return [];\n  },\n\n  /**\n   * Returns the first error message for an attribute, false otherwise\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {string|false} First error message or false\n   */\n  first: function(attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute][0];\n    }\n\n    return false;\n  },\n\n  /**\n   * Get all error messages from all failing attributes\n   *\n   * @return {Object} Failed attribute names for keys and an array of messages for values\n   */\n  all: function() {\n    return this.errors;\n  },\n\n  /**\n   * Determine if there are any error messages for an attribute\n   *\n   * @param  {string}  attribute A key in the data object being validated\n   * @return {boolean}\n   */\n  has: function(attribute) {\n    if (this.errors.hasOwnProperty(attribute)) {\n      return true;\n    }\n\n    return false;\n  }\n};\n\nmodule.exports = Errors;\n"]},"metadata":{},"sourceType":"script"}
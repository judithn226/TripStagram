{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction iterate(files, cb) {\n  Array.prototype.forEach.call(files, cb);\n}\n\nfunction getTotalFileSize(files) {\n  var result = 0;\n  iterate(files, function (file) {\n    return result += file.size;\n  });\n  return result;\n}\n\nfunction getFileExtension(filename) {\n  return filename.substr((~-filename.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n}\n\nvar FileValidator = {\n  extend: function extend(name, fn) {\n    this[name] = fn;\n  },\n\n  /**\n   * Returns `true` if there are no files in file list\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isEmpty: function isEmpty(files) {\n    return files.length === 0;\n  },\n\n  /**\n   * Returns `true` if files count equals to 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isSingle: function isSingle(files) {\n    return files.length === 1;\n  },\n\n  /**\n   * Returns `true` if files count is more than 1\n   *\n   * @param {FileList} files File list\n   * @returns {Boolean}\n   */\n  isMultiple: function isMultiple(files) {\n    return files.length > 1;\n  },\n\n  /**\n   * Returns `true` if files count is within allowed range.\n   * If `max` is not supplied, checks if files count equals `min`.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum files count\n   * @param {Number} [max] Maximum files count\n   * @returns {Boolean}\n   */\n  isFilesCount: function isFilesCount(files, min, max) {\n    if (!max) {\n      return files.length === min;\n    } else {\n      return files.length >= min && files.length <= max;\n    }\n  },\n\n  /**\n   * Returns `true` if total size of all files is within allowed range.\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isTotalSize: function isTotalSize(files, min, max) {\n    var totalSize = getTotalFileSize(files);\n    return totalSize >= min && (!max || totalSize <= max);\n  },\n\n  /**\n   * Returns `true` if each file's size is within allowed range\n   *\n   * @param {FileList} files File list\n   * @param {Number} min Minimum size\n   * @param {Number} [max] Maximum size\n   * @returns {Boolean}\n   */\n  isEachFileSize: function isEachFileSize(files, min, max) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var fileValid = file.size >= min && (!max || file.size <= max);\n\n      if (!fileValid) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n\n  /**\n   * Returns `true` if each file's extension is in the `extensions` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} extensions Array of allowed file extensions. All extensions must be lower-case.\n   * @returns {Boolean}\n   */\n  isExtension: function isExtension(files, extensions) {\n    var allValid = true;\n    iterate(files, function (file) {\n      var ext = getFileExtension(file.name);\n\n      if (extensions.indexOf(ext) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  },\n\n  /**\n   * Returns `true` if each file's mime type is in the `types` array\n   *\n   * @param {FileList} files File list\n   * @param {Array} types Array of allowed mime types\n   * @returns {Boolean}\n   */\n  isType: function isType(files, types) {\n    var allValid = true;\n    iterate(files, function (file) {\n      if (types.indexOf(file.type) === -1) {\n        allValid = false;\n      }\n    });\n    return allValid;\n  }\n};\nexports['default'] = FileValidator;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/Users/victoriablackburn/TripStagram/client/node_modules/react-bootstrap-validation/lib/FileValidator.js"],"names":["Object","defineProperty","exports","value","iterate","files","cb","Array","prototype","forEach","call","getTotalFileSize","result","file","size","getFileExtension","filename","substr","lastIndexOf","toLowerCase","FileValidator","extend","name","fn","isEmpty","length","isSingle","isMultiple","isFilesCount","min","max","isTotalSize","totalSize","isEachFileSize","allValid","fileValid","isExtension","extensions","ext","indexOf","isType","types","type","module"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nfunction iterate(files, cb) {\n    Array.prototype.forEach.call(files, cb);\n}\n\nfunction getTotalFileSize(files) {\n    var result = 0;\n\n    iterate(files, function (file) {\n        return result += file.size;\n    });\n\n    return result;\n}\n\nfunction getFileExtension(filename) {\n    return filename.substr((~ -filename.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n}\n\nvar FileValidator = {\n    extend: function extend(name, fn) {\n        this[name] = fn;\n    },\n\n    /**\n     * Returns `true` if there are no files in file list\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isEmpty: function isEmpty(files) {\n        return files.length === 0;\n    },\n\n    /**\n     * Returns `true` if files count equals to 1\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isSingle: function isSingle(files) {\n        return files.length === 1;\n    },\n\n    /**\n     * Returns `true` if files count is more than 1\n     *\n     * @param {FileList} files File list\n     * @returns {Boolean}\n     */\n    isMultiple: function isMultiple(files) {\n        return files.length > 1;\n    },\n\n    /**\n     * Returns `true` if files count is within allowed range.\n     * If `max` is not supplied, checks if files count equals `min`.\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum files count\n     * @param {Number} [max] Maximum files count\n     * @returns {Boolean}\n     */\n    isFilesCount: function isFilesCount(files, min, max) {\n        if (!max) {\n            return files.length === min;\n        } else {\n            return files.length >= min && files.length <= max;\n        }\n    },\n\n    /**\n     * Returns `true` if total size of all files is within allowed range.\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum size\n     * @param {Number} [max] Maximum size\n     * @returns {Boolean}\n     */\n    isTotalSize: function isTotalSize(files, min, max) {\n        var totalSize = getTotalFileSize(files);\n\n        return totalSize >= min && (!max || totalSize <= max);\n    },\n\n    /**\n     * Returns `true` if each file's size is within allowed range\n     *\n     * @param {FileList} files File list\n     * @param {Number} min Minimum size\n     * @param {Number} [max] Maximum size\n     * @returns {Boolean}\n     */\n    isEachFileSize: function isEachFileSize(files, min, max) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            var fileValid = file.size >= min && (!max || file.size <= max);\n\n            if (!fileValid) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    },\n\n    /**\n     * Returns `true` if each file's extension is in the `extensions` array\n     *\n     * @param {FileList} files File list\n     * @param {Array} extensions Array of allowed file extensions. All extensions must be lower-case.\n     * @returns {Boolean}\n     */\n    isExtension: function isExtension(files, extensions) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            var ext = getFileExtension(file.name);\n\n            if (extensions.indexOf(ext) === -1) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    },\n\n    /**\n     * Returns `true` if each file's mime type is in the `types` array\n     *\n     * @param {FileList} files File list\n     * @param {Array} types Array of allowed mime types\n     * @returns {Boolean}\n     */\n    isType: function isType(files, types) {\n        var allValid = true;\n\n        iterate(files, function (file) {\n            if (types.indexOf(file.type) === -1) {\n                allValid = false;\n            }\n        });\n\n        return allValid;\n    }\n};\n\nexports['default'] = FileValidator;\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var Messages = require('./messages');\n\nrequire('./lang/en');\n\nvar require_method = require;\nvar container = {\n  messages: {},\n\n  /**\n   * Set messages for language\n   *\n   * @param {string} lang\n   * @param {object} rawMessages\n   * @return {void}\n   */\n  _set: function (lang, rawMessages) {\n    this.messages[lang] = rawMessages;\n  },\n\n  /**\n   * Set message for given language's rule.\n   *\n   * @param {string} lang\n   * @param {string} attribute\n   * @param {string|object} message\n   * @return {void}\n   */\n  _setRuleMessage: function (lang, attribute, message) {\n    this._load(lang);\n\n    if (message === undefined) {\n      message = this.messages[lang].def;\n    }\n\n    this.messages[lang][attribute] = message;\n  },\n\n  /**\n   * Load messages (if not already loaded)\n   *\n   * @param  {string} lang\n   * @return {void}\n   */\n  _load: function (lang) {\n    if (!this.messages[lang]) {\n      try {\n        var rawMessages = require_method('./lang/' + lang);\n\n        this._set(lang, rawMessages);\n      } catch (e) {}\n    }\n  },\n\n  /**\n   * Get raw messages for language\n   *\n   * @param  {string} lang\n   * @return {object}\n   */\n  _get: function (lang) {\n    this._load(lang);\n\n    return this.messages[lang];\n  },\n\n  /**\n   * Make messages for given language\n   *\n   * @param  {string} lang\n   * @return {Messages}\n   */\n  _make: function (lang) {\n    this._load(lang);\n\n    return new Messages(lang, this.messages[lang]);\n  }\n};\nmodule.exports = container;","map":{"version":3,"sources":["/Users/judithnwagwu/Documents/TripStagram/client/node_modules/validatorjs/src/lang.js"],"names":["Messages","require","require_method","container","messages","_set","lang","rawMessages","_setRuleMessage","attribute","message","_load","undefined","def","e","_get","_make","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEAA,OAAO,CAAC,WAAD,CAAP;;AAEA,IAAIC,cAAc,GAAGD,OAArB;AAEA,IAAIE,SAAS,GAAG;AAEdC,EAAAA,QAAQ,EAAE,EAFI;;AAId;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,UAASC,IAAT,EAAeC,WAAf,EAA4B;AAChC,SAAKH,QAAL,CAAcE,IAAd,IAAsBC,WAAtB;AACD,GAba;;AAed;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,eAAe,EAAE,UAASF,IAAT,EAAeG,SAAf,EAA0BC,OAA1B,EAAmC;AAClD,SAAKC,KAAL,CAAWL,IAAX;;AACA,QAAII,OAAO,KAAKE,SAAhB,EAA2B;AACzBF,MAAAA,OAAO,GAAG,KAAKN,QAAL,CAAcE,IAAd,EAAoBO,GAA9B;AACD;;AAED,SAAKT,QAAL,CAAcE,IAAd,EAAoBG,SAApB,IAAiCC,OAAjC;AACD,GA9Ba;;AAgCd;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,EAAE,UAASL,IAAT,EAAe;AACpB,QAAI,CAAC,KAAKF,QAAL,CAAcE,IAAd,CAAL,EAA0B;AACxB,UAAI;AACF,YAAIC,WAAW,GAAGL,cAAc,CAAC,YAAYI,IAAb,CAAhC;;AACA,aAAKD,IAAL,CAAUC,IAAV,EAAgBC,WAAhB;AACD,OAHD,CAGE,OAAOO,CAAP,EAAU,CAAE;AACf;AACF,GA7Ca;;AA+Cd;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,EAAE,UAAST,IAAT,EAAe;AACnB,SAAKK,KAAL,CAAWL,IAAX;;AACA,WAAO,KAAKF,QAAL,CAAcE,IAAd,CAAP;AACD,GAxDa;;AA0Dd;AACF;AACA;AACA;AACA;AACA;AACEU,EAAAA,KAAK,EAAE,UAASV,IAAT,EAAe;AACpB,SAAKK,KAAL,CAAWL,IAAX;;AACA,WAAO,IAAIN,QAAJ,CAAaM,IAAb,EAAmB,KAAKF,QAAL,CAAcE,IAAd,CAAnB,CAAP;AACD;AAnEa,CAAhB;AAuEAW,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["var Messages = require('./messages');\n\nrequire('./lang/en');\n\nvar require_method = require;\n\nvar container = {\n\n  messages: {},\n\n  /**\n   * Set messages for language\n   *\n   * @param {string} lang\n   * @param {object} rawMessages\n   * @return {void}\n   */\n  _set: function(lang, rawMessages) {\n    this.messages[lang] = rawMessages;\n  },\n\n  /**\n   * Set message for given language's rule.\n   *\n   * @param {string} lang\n   * @param {string} attribute\n   * @param {string|object} message\n   * @return {void}\n   */\n  _setRuleMessage: function(lang, attribute, message) {\n    this._load(lang);\n    if (message === undefined) {\n      message = this.messages[lang].def;\n    }\n\n    this.messages[lang][attribute] = message;\n  },\n\n  /**\n   * Load messages (if not already loaded)\n   *\n   * @param  {string} lang\n   * @return {void}\n   */\n  _load: function(lang) {\n    if (!this.messages[lang]) {\n      try {\n        var rawMessages = require_method('./lang/' + lang);\n        this._set(lang, rawMessages);\n      } catch (e) {}\n    }\n  },\n\n  /**\n   * Get raw messages for language\n   *\n   * @param  {string} lang\n   * @return {object}\n   */\n  _get: function(lang) {\n    this._load(lang);\n    return this.messages[lang];\n  },\n\n  /**\n   * Make messages for given language\n   *\n   * @param  {string} lang\n   * @return {Messages}\n   */\n  _make: function(lang) {\n    this._load(lang);\n    return new Messages(lang, this.messages[lang]);\n  }\n\n};\n\nmodule.exports = container;\n"]},"metadata":{},"sourceType":"script"}
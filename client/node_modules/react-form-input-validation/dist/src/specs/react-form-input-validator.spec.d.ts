import { Component } from "react";
export interface IDynamicKeyValues {
    [key: string]: any;
}
interface IAppState {
    errors?: IValidatorErrors;
    fields?: IDynamicKeyValues;
    isValidatorUpdate?: boolean;
}
interface IAppProps {
}
export interface IReactComponent extends Component<IAppProps, IAppState> {
}
export declare enum Lang {
    ar = "ar",
    az = "az",
    be = "be",
    bg = "bg",
    bs = "bs",
    ca = "ca",
    cs = "cs",
    cy = "cy",
    da = "da",
    de = "de",
    el = "el",
    en = "en",
    es = "es",
    et = "et",
    eu = "eu",
    fa = "fa",
    fi = "fi",
    fr = "fr",
    hr = "hr",
    hu = "hu",
    id = "id",
    it = "it",
    ja = "ja",
    ka = "ka",
    ko = "ko",
    It = "It",
    Iv = "Iv",
    mk = "mk",
    mn = "mn",
    ms = "ms",
    nb_NO = "nb_NO",
    nl = "nl",
    pl = "pl",
    pt = "pt",
    pt_BR = "pt_BR",
    ro = "ro",
    ru = "ru",
    se = "se",
    sl = "sl",
    sq = "sq",
    sr = "sr",
    sv = "sv",
    tr = "tr",
    ua = "ua",
    uk = "uk",
    vi = "vi",
    zh = "zh",
    zh_TW = "zh_TW"
}
export interface IOptions {
    locale: Lang;
}
export interface IValidatorErrors {
    [key: string]: string;
}
export declare type ReactFormSubmitEventHandler = (fields: any) => void;
declare type EventListener = (data?: any) => void;
declare abstract class EventTarget {
    private listeners;
    protected addListener(type: string, callback: EventListener): void;
    protected removeListener(type: string, callback: EventListener): void;
    protected emit(event: CustomEvent): boolean;
}
export declare abstract class ReactFormInputValidation extends EventTarget {
    onformsubmit: ReactFormSubmitEventHandler;
    constructor(component: IReactComponent, options?: IOptions);
    static useLang(locale: string): void;
    static register(name: string, callbackFn: Function, errorMessage: string): void;
    static registerAsync(name: string, callbackFn: Function): void;
    static setMessages(langCode: Lang, values: object): void;
    static getMessages(langCode: Lang): object;
    static getDefaultLang(): Lang;
    static setAttributeFormatter(callbackFn: Function): void;
    addEventListener(event: string, callback: (...args: Array<any>) => void): this;
    removeEventListener(event: string, callback: (...args: Array<any>) => void): this;
    useRules(rules: any): void;
    handleChangeEvent(event: React.ChangeEvent<HTMLInputElement>): void;
    handleBlurEvent(event: React.FocusEvent<HTMLInputElement>): void;
    handleSubmit(event: React.FormEvent): void;
}
export {};
